typedef struct DataMgrType DataMgrType;

DataMgrType *DataMgrInit(char *path);
void DataMgrFinish(DataMgrType *dm);

int DataMgrInitModule(DataMgrType *dm);
void DataMgrFinishModule(void);

Err DDmInit(void);
Err DDmCreateDatabase(UInt16 cardNo, const Char *nameP, UInt32 creator, UInt32 type, Boolean resDB);
Err DDmCreateDatabaseFromImage(MemPtr bufferP);
Err DDmDeleteDatabase(UInt16 cardNo, LocalID dbID);
UInt16 DDmNumDatabases(UInt16 cardNo);
LocalID DDmGetDatabase(UInt16 cardNo, UInt16 index);
LocalID DDmFindDatabase(UInt16 cardNo, const Char *nameP);
Err DDmGetNextDatabaseByTypeCreator(Boolean newSearch, DmSearchStatePtr stateInfoP, UInt32 type, UInt32 creator, Boolean onlyLatestVers, UInt16 *cardNoP, LocalID *dbIDP);
Err DDmDatabaseInfo(UInt16 cardNo, LocalID dbID, Char *nameP, UInt16 *attributesP, UInt16 *versionP, UInt32 *crDateP, UInt32 *modDateP, UInt32 *bckUpDateP, UInt32 *modNumP, LocalID *appInfoIDP, LocalID *sortInfoIDP, UInt32 *typeP, UInt32 *creatorP);
Err DDmSetDatabaseInfo(UInt16 cardNo, LocalID dbID, const Char *nameP, UInt16 *attributesP, UInt16 *versionP, UInt32 *crDateP, UInt32 *modDateP, UInt32 *bckUpDateP, UInt32 *modNumP, LocalID *appInfoIDP, LocalID *sortInfoIDP, UInt32 *typeP, UInt32 *creatorP);
Err DDmDatabaseSize(UInt16 cardNo, LocalID dbID, UInt32 *numRecordsP, UInt32 *totalBytesP, UInt32 *dataBytesP);
Err DDmDatabaseProtect(UInt16 cardNo, LocalID dbID, Boolean protect);
DmOpenRef DDmOpenDatabase(UInt16 cardNo, LocalID dbID, UInt16 mode);
DmOpenRef DDmOpenDatabaseByTypeCreator(UInt32 type, UInt32 creator, UInt16 mode);
DmOpenRef DDmOpenDBNoOverlay(UInt16 cardNo, LocalID dbID, UInt16 mode);
Err DDmCloseDatabase(DmOpenRef dbP);
DmOpenRef DDmNextOpenDatabase(DmOpenRef currentP);
Err DDmOpenDatabaseInfo(DmOpenRef dbP, LocalID *dbIDP, UInt16 *openCountP, UInt16 *modeP, UInt16 *cardNoP, Boolean *resDBP);
LocalID DDmGetAppInfoID(DmOpenRef dbP);
void DDmGetDatabaseLockState(DmOpenRef dbR, UInt8 *highest, UInt32 *count, UInt32 *busy);
Err DDmResetRecordStates(DmOpenRef dbP);
Err DDmGetLastErr(void);
UInt16 DDmNumRecords(DmOpenRef dbP);
UInt16 DDmNumRecordsInCategory(DmOpenRef dbP, UInt16 category);
Err DDmRecordInfo(DmOpenRef dbP, UInt16 index, UInt16 *attrP, UInt32 *uniqueIDP, LocalID *chunkIDP);
Err DDmSetRecordInfo(DmOpenRef dbP, UInt16 index, UInt16 *attrP, UInt32 *uniqueIDP);
Err DDmAttachRecord(DmOpenRef dbP, UInt16 *atP, MemHandle newH, MemHandle *oldHP);
Err DDmDetachRecord(DmOpenRef dbP, UInt16 index, MemHandle *oldHP);
Err DDmMoveRecord(DmOpenRef dbP, UInt16 from, UInt16 to);
MemHandle DDmNewRecordEx(DmOpenRef dbP, UInt16 *atP, UInt32 size, void *p);
MemHandle DDmNewRecord(DmOpenRef dbP, UInt16 *atP, UInt32 size);
Err DDmRemoveRecord(DmOpenRef dbP, UInt16 index);
Err DDmDeleteRecord(DmOpenRef dbP, UInt16 index);
Err DDmArchiveRecord(DmOpenRef dbP, UInt16 index);
MemHandle DDmNewHandle(DmOpenRef dbP, UInt32 size);
Err DDmRemoveSecretRecords(DmOpenRef dbP);
Err DDmFindRecordByID(DmOpenRef dbP, UInt32 uniqueID, UInt16 *indexP);
MemHandle DDmQueryRecord(DmOpenRef dbP, UInt16 index);
MemHandle DDmGetRecord(DmOpenRef dbP, UInt16 index);
MemHandle DDmQueryNextInCategory(DmOpenRef dbP, UInt16 *indexP, UInt16 category);
UInt16 DDmPositionInCategory(DmOpenRef dbP, UInt16 index, UInt16 category);
Err DDmSeekRecordInCategory(DmOpenRef dbP, UInt16 *indexP, UInt16 offset, Int16 direction, UInt16 category);
MemHandle DDmResizeRecord(DmOpenRef dbP, UInt16 index, UInt32 newSize);
Err DDmReleaseRecord(DmOpenRef dbP, UInt16 index, Boolean dirty);
UInt16 DDmSearchRecord(MemHandle recH, DmOpenRef *dbPP);
Err DDmMoveCategory(DmOpenRef dbP, UInt16 toCategory, UInt16 fromCategory, Boolean dirty);
Err DDmDeleteCategory(DmOpenRef dbR, UInt16 categoryNum);
Err DDmWriteCheck(void *recordP, UInt32 offset, UInt32 bytes);
Err DDmWrite(void *recordP, UInt32 offset, const void *srcP, UInt32 bytes);
Err DDmStrCopy(void *recordP, UInt32 offset, const Char *srcP);
Err DDmSet(void *recordP, UInt32 offset, UInt32 bytes, UInt8 value);
MemHandle DDmGetResource(DmResType type, DmResID resID);
MemHandle DDmGet1Resource(DmResType type, DmResID resID);
Err DDmReleaseResource(MemHandle resourceH);
MemHandle DDmResizeResource(MemHandle resourceH, UInt32 newSize);
DmOpenRef DDmNextOpenResDatabase(DmOpenRef dbP);
UInt16 DDmFindResourceType(DmOpenRef dbP, DmResType resType, UInt16 typeIndex);
UInt16 DDmFindResource(DmOpenRef dbP, DmResType resType, DmResID resID, MemHandle resH);
UInt16 DDmSearchResource(DmResType resType, DmResID resID, MemHandle resH, DmOpenRef *dbPP);
UInt16 DDmNumResources(DmOpenRef dbP);
Err DDmResourceInfo(DmOpenRef dbP, UInt16 index, DmResType *resTypeP, DmResID *resIDP, LocalID *chunkLocalIDP);
Err DDmSetResourceInfo(DmOpenRef dbP, UInt16 index, DmResType *resTypeP, DmResID *resIDP);
Err DDmAttachResource(DmOpenRef dbP, MemHandle newH, DmResType resType, DmResID resID);
Err DDmDetachResource(DmOpenRef dbP, UInt16 index, MemHandle *oldHP);
MemHandle DDmNewResourceEx(DmOpenRef dbP, DmResType resType, DmResID resID, UInt32 size, void *p);
MemHandle DDmNewResource(DmOpenRef dbP, DmResType resType, DmResID resID, UInt32 size);
Err DDmRemoveResource(DmOpenRef dbP, UInt16 index);
MemHandle DDmGetResourceIndex(DmOpenRef dbP, UInt16 index);
Err DDmQuickSort(DmOpenRef dbP, DmComparF *compar, Int16 other);
Err DDmInsertionSort(DmOpenRef dbR, DmComparF *compar, Int16 other);
UInt16 DDmFindSortPosition(DmOpenRef dbP, void *newRecord, SortRecordInfoPtr newRecordInfo, DmComparF *compar, Int16 other);
UInt16 DDmFindSortPositionV10(DmOpenRef dbP, void *newRecord, DmComparF *compar, Int16 other);
